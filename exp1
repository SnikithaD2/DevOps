Database 
CREATE DATABASE event_db;

USE event_db;

CREATE TABLE registrations (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  phone VARCHAR(20) NOT NULL,
  event VARCHAR(100) NOT NULL,
  registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
select * from registrations;

Server.js
const express = require('express');
const mysql = require('mysql2');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const port = 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static('public')); // serve static files like HTML/CSS if needed

// MySQL connection config â€” replace with your MySQL credentials
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '1234',
  database: 'event_db',
});

db.connect(err => {
  if (err) {
    console.error('Database connection error:', err);
    process.exit(1);
  }
  console.log('Connected to MySQL database.');
});

// Registration endpoint
app.post('/register', (req, res) => {
  const { name, email, phone, event } = req.body;

  if (!name || !email || !phone || !event) {
    return res.status(400).json({ error: 'All fields are required.' });
  }

  const sql = 'INSERT INTO registrations (name, email, phone, event) VALUES (?, ?, ?, ?)';

  db.query(sql, [name, email, phone, event], (err, results) => {
    if (err) {
      if (err.code === 'ER_DUP_ENTRY') {
        return res.status(400).json({ error: 'Email already registered.' });
      }
      console.error('DB error:', err);
      return res.status(500).json({ error: 'Database error.' });
    }
    res.json({ message: 'Registration successful!' });
  });
});

// Start server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>User Registration</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <div class="container">
    <form id="registrationForm">
      <h2>Register for Event</h2>

      <label for="name">Name</label>
      <input id="name" name="name" type="text" required />

      <label for="email">Email</label>
      <input id="email" name="email" type="email" required />

      <label for="phone">Phone Number</label>
      <input id="phone" name="phone" type="tel" pattern="[0-9]{10}" placeholder="10-digit number" required />

      <label for="event">Event</label>
      <select id="event" name="event" required>
        <option value="">-- Select an Event --</option>
        <option value="Workshop">Workshop</option>
        <option value="Seminar">Seminar</option>
        <option value="Networking">Networking</option>
        <option value="Hackathon">Hackathon</option>
      </select>

      <button type="submit">Register</button>

      <p id="message" class="message"></p>
    </form>
  </div>

  <script>
    const form = document.getElementById('registrationForm');
    const messageEl = document.getElementById('message');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = {
        name: form.name.value.trim(),
        email: form.email.value.trim(),
        phone: form.phone.value.trim(),
        event: form.event.value
      };

      try {
        const response = await fetch('/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (response.ok) {
          messageEl.style.color = 'green';
          messageEl.textContent = data.message;
          form.reset();
        } else {
          messageEl.style.color = 'red';
          messageEl.textContent = data.error || 'Registration failed.';
        }
      } catch (error) {
        messageEl.style.color = 'red';
        messageEl.textContent = 'Server error. Please try again later.';
      }
    });
  </script>
</body>
</html>

/* styles.css */

body {
  font-family: Arial, sans-serif;
  background-color: #f9f9f9;
  margin: 0;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

.container {
  background-color: white;
  padding: 25px 30px;
  border-radius: 8px;
  box-shadow: 0 3px 12px rgba(0,0,0,0.15);
  width: 320px;
}

form h2 {
  text-align: center;
  margin-bottom: 20px;
}

label {
  display: block;
  margin: 12px 0 6px;
  font-weight: bold;
}

input, select {
  width: 100%;
  padding: 8px 10px;
  font-size: 14px;
  border: 1px solid #ccc;
  border-radius: 5px;
  box-sizing: border-box;
}

input:focus, select:focus {
  border-color: #007BFF;
  outline: none;
}

button {
  margin-top: 20px;
  width: 100%;
  padding: 10px 0;
  background-color: #007BFF;
  color: white;
  font-size: 16px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #0056b3;
}

.message {
  margin-top: 15px;
  font-weight: bold;
  text-align: center;
}
